package main

// file generated by
// github.com/mh-cbon/channeler
// do not edit

import (
	"encoding/json"
)

// MyTomate is channeled.
type MyTomate struct {
	embed Tomate
	ops   chan func()
	stop  chan bool
	tick  chan bool
}

// NewMyTomate constructs a channeled version of Tomate
func NewMyTomate() *MyTomate {
	ret := &MyTomate{
		ops:  make(chan func()),
		tick: make(chan bool),
		stop: make(chan bool),
	}
	go ret.Start()
	return ret
}

// Hello is channeled
func (t *MyTomate) Hello() {
	t.ops <- func() {
		t.embed.Hello()
	}
	<-t.tick
}

// Good is channeled
func (t *MyTomate) Good() {
	t.ops <- func() {
		t.embed.Good()
	}
	<-t.tick
}

// Name is channeled
func (t *MyTomate) Name(it string) string {
	var retVar0 string
	t.ops <- func() {
		retVar0 = t.embed.Name(it)
	}
	<-t.tick
	return retVar0
}

// Start the main loop
func (t *MyTomate) Start() {
	for {
		select {
		case op := <-t.ops:
			op()
			t.tick <- true
		case <-t.stop:
			return
		}
	}
}

// Stop the main loop
func (t *MyTomate) Stop() {
	t.stop <- true
}

//UnmarshalJSON JSON unserializes MyTomate
func (t *MyTomate) UnmarshalJSON(b []byte) error {
	var embed Tomate
	var err error
	t.ops <- func() {
		err = json.Unmarshal(b, &embed)
		if err == nil {
			t.embed = embed
		}
	}
	<-t.tick
	return err
}

//MarshalJSON JSON serializes MyTomate
func (t *MyTomate) MarshalJSON() ([]byte, error) {
	var ret []byte
	var err error
	t.ops <- func() {
		ret, err = json.Marshal(t.embed)
	}
	<-t.tick
	return ret, err
}
